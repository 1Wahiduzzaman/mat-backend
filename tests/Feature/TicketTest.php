<?php

namespace Tests\Feature;

use App\Models\Admin;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Mockery\Mock;
use Tests\TestCase;

class TicketTest extends TestCase
{

    protected $adminToken;

    protected $seed = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->seed();

        $this->adminToken = $this->post('/api/v1/admin/login', [
            'email' => 'support@mail.com',
            'password' => 12345678
        ])->json('data.token.access_token');

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_status()
    {

        $response =  $this->withToken($this->adminToken)->get('/api/v1/admin/get-all-tickets');

        $response->assertStatus(200);
    }


    public function test_ticket()
    {
       $response =  $this->withToken($this->adminToken)->get('/api/v1/admin/get-all-tickets');


       $singleResponse = $response->json();

     $secondResponse =  $this->withToken($this->adminToken)->get('/api/v1/admin/getTickets/' . $singleResponse['data'][0]['id']);


        $secondResponse->assertJsonStructure(['data']);
        $secondResponse->assertJson($secondResponse->json());
    }

    public function  test_send_resolve_Ticket()
    {
        $response = $this->withToken($this->adminToken)->withHeaders([
            'message' => 'hello resolved'
        ])->post('/api/v1/admin/submitTicketRequests');

//        $response->assertStatus(200);
        $response->assertJsonValidationErrors('new errors');
    }
}
